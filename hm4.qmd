---
title: "Homework 4"
author: "[Andy Gao]{style='background-color: yellow;'}"
toc: true
title-block-banner: true
title-block-style: default
format: html
# format: pdf
editor: 
  markdown: 
    wrap: 72
---

------------------------------------------------------------------------

::: {.callout-important style="font-size: 0.8em;"}
Please read the instructions carefully before submitting your
assignment.

1.  This assignment requires you to only upload a `PDF` file on Canvas
2.  Don't collapse any code cells before submitting.
3.  Remember to make sure all your code output is rendered properly
    before uploading your submission.

⚠️ Please add your name to the author information in the frontmatter
before submitting your assignment ⚠️
:::

We will be using the following libraries:

```{r}
packages <- c(
  "dplyr", 
  "readr", 
  "tidyr", 
  "purrr", 
  "stringr", 
  "corrplot", 
  "car", 
  "caret", 
  "torch", 
  "nnet", 
  "broom"
)

renv::install(packages)
sapply(packages, require, character.only=T)
```

## <br><br><br><br>

## Question 1

::: callout-tip
## 30 points

Automatic differentiation using `torch`
:::

###### 1.1 (5 points)

Consider $g(x, y)$ given by $$
g(x, y) = (x - 3)^2 + (y - 4)^2.
$$

Using elementary calculus derive the expressions for

$$
\frac{d}{dx}g(x, y), \quad \text{and} \quad \frac{d}{dy}g(x, y).
$$

Using your answer from above, what is the answer to $$
\frac{d}{dx}g(x, y) \Bigg|_{(x=3, y=4)} \quad \text{and} \quad \frac{d}{dy}g(x, y) \Bigg|_{(x=3, y=4)} ?
$$

Define $g(x, y)$ as a function in R, compute the gradient of $g(x, y)$
with respect to $x=3$ and $y=4$. Does the answer match what you
expected?

```{r}
install.packages("numDeriv")
library(numDeriv)

equation <- function(point) {
  x <- point[1]
  y <- point[2]
  return((x - 3)^2 + (y - 4)^2)
}

grad(equation, c(3, 4))
```

The answer came out as i expected because the gradient would result in
2(x-3) for the partial diff for x and 2(y-4) for y and when we calc it
with the respect for x and y we get \<0,0\>

------------------------------------------------------------------------

###### 1.2 (10 points)

$$\newcommand{\u}{\boldsymbol{u}}\newcommand{\v}{\boldsymbol{v}}$$

Consider $h(\u, \v)$ given by $$
h(\u, \v) = (\u \cdot \v)^3,
$$ where $\u \cdot \v$ denotes the dot product of two vectors, i.e.,
$\u \cdot \v = \sum_{i=1}^n u_i v_i.$

Using elementary calculus derive the expressions for the gradients

$$
\begin{aligned}
\nabla_\u h(\u, \v) &= \Bigg(\frac{d}{du_1}h(\u, \v), \frac{d}{du_2}h(\u, \v), \dots, \frac{d}{du_n}h(\u, \v)\Bigg)
\end{aligned}
$$

Using your answer from above, what is the answer to
$\nabla_\u h(\u, \v)$ when $n=10$ and

$$
\begin{aligned}
\u = (-1, +1, -1, +1, -1, +1, -1, +1, -1, +1)\\
\v = (-1, -1, -1, -1, -1, +1, +1, +1, +1, +1)
\end{aligned}
$$

Define $h(\u, \v)$ as a function in R, initialize the two vectors $\u$
and $\v$ as `torch_tensor`s. Compute the gradient of $h(\u, \v)$ with
respect to $\u$. Does the answer match what you expected?

```{r}
install.packages("torch")
library(torch)

h <- function(u, v) {
  return((torch_dot(u, v))^3)
}

gradient <- function(u, v) {
  uv <- torch_dot(u, v)
  gradient <- 3 * uv^2 * v
  return(gradient)
}

u <- torch_tensor(c(-1, 1, -1, 1, -1, 1, -1, 1, -1, 1), dtype = torch_float())
v <- torch_tensor(c(-1, -1, -1, -1, -1, 1, 1, 1, 1, 1), dtype = torch_float())

gradient(u,v)
```

------------------------------------------------------------------------

###### 1.3 (5 points)

Consider the following function $$
f(z) = z^4 - 6z^2 - 3z + 4
$$

Derive the expression for $$
f'(z_0) = \frac{df}{dz}\Bigg|_{z=z_0}
$$ and evaluate $f'(z_0)$ when $z_0 = -3.5$.

Define $f(z)$ as a function in R, and using the `torch` library compute
$f'(-3.5)$.

```{r}
install.packages("numDeriv")
library(numDeriv)

fz <- function(z) {
  return(z^4 - 6*z^2 - 3*z + 4)
}

f_p <- function(z) {
  return(4*z^3 - 12*z - 3)
}

z_0 <- -3.5
f_p(z_0)
```

------------------------------------------------------------------------

###### 1.4 (5 points)

For the same function $f$, initialize $z[1] = -3.5$, and perform $n=100$
iterations of **gradient descent**, i.e.,

> \$z\[{k+1}\] = z\[k\] - \eta f'(z\[k\])    \$ for
> $k = 1, 2, \dots, 100$

Plot the curve $f$ and add taking $\eta = 0.02$, add the points
$\{z_0, z_1, z_2, \dots z_{100}\}$ obtained using gradient descent to
the plot. What do you observe?

```{r}
gradient_descent <- function(f, f_prime, z_0, eta, n) {
  z_v <- numeric(n)
  z_v[1] <- z_0
  
  for (i in 2:n) {
    z_v[i] <- z_v[i - 1] - eta * f_prime(z_v[i - 1])
  }
  
  return(z_v)
}

z_0 <- -3.5
eta <- 0.02
n <- 100
z_v <- gradient_descent(fz, f_p, z_0, eta, n)

curve(fz, from = -5, to = 5, ylim = c(-50, 150), xlab = "z", ylab = "f(z)")
points(z_v, fz(z_v))
points(z_0, fz(z_0), col = "purple", pch = 16)
```

In the plot we can see that the inital point starts around f(z):100 and
z:-3.5 and we see that the points marked during the decent are focused
around f(z):0 and -2\< z \<-0.5

------------------------------------------------------------------------

###### 1.5 (5 points)

Redo the same analysis as **Question 1.4**, but this time using
$\eta = 0.03$. What do you observe? What can you conclude from this
analysis

```{r}
gradient_descent <- function(f, f_prime, z_0, eta, n) {
  z_v <- numeric(n)
  z_v[1] <- z_0
  
  for (i in 2:n) {
    z_v[i] <- z_v[i - 1] - eta * f_prime(z_v[i - 1])
  }
  
  return(z_v)
}

z_0 <- -3.5
eta <- 0.03
n <- 100
z_v <- gradient_descent(fz, f_p, z_0, eta, n)

curve(fz, from = -5, to = 5, ylim = c(-50, 150), xlab = "z", ylab = "f(z)")
points(z_v, fz(z_v))
points(z_0, fz(z_0), col = "purple", pch = 16)
```

I can conclude that as η changes the gradient descent points also
changes

<br><br><br><br> <br><br><br><br> ---

## Question 2

::: callout-tip
## 50 points

Logistic regression and interpretation of effect sizes
:::

For this question we will use the **Titanic** dataset from the Stanford
data archive. This dataset contains information about passengers aboard
the Titanic and whether or not they survived.

------------------------------------------------------------------------

###### 2.1 (5 points)

Read the data from the following URL as a tibble in R. Preprocess the
data such that the variables are of the right data type, e.g., binary
variables are encoded as factors, and convert all column names to lower
case for consistency. Let's also rename the response variable `Survival`
to `y` for convenience.

```{r}
url <- "https://web.stanford.edu/class/archive/cs/cs109/cs109.1166/stuff/titanic.csv"
df <- read.csv(url)
names(df) <- tolower(names(df))
binary_vars <- c("survived", "sex")
df[binary_vars] <- lapply(df[binary_vars], as.factor)
names(df)[names(df) == "survived"] <- "y"

```

------------------------------------------------------------------------

###### 2.2 (5 points)

Visualize the correlation matrix of all numeric columns in `df` using
`corrplot()`

```{r}

df %>%
  {corr_matrix <- cor(.[sapply(., is.numeric)])
  corrplot(corr_matrix)}
```

------------------------------------------------------------------------

###### 2.3 (10 points)

Fit a logistic regression model to predict the probability of surviving
the titanic as a function of:

-   `pclass`

-   `sex`

-   `age`

-   `fare`

-   `# siblings`

-   `# parents`

    ```{r}

    full_model <-  glm(y ~ pclass + sex + age + fare + siblings.spouses.aboard + parents.children.aboard,data = df,family = binomial)

    summary(full_model)
    ```

------------------------------------------------------------------------

###### 2.4 (30 points)

Provide an interpretation for the slope and intercept terms estimated in
`full_model` in terms of the log-odds of survival in the titanic and in
terms of the odds-ratio (if the covariate is also categorical).

The intercept means that the log odds of survival for a particular
passenger is about 5.297252

the slope term estimates mean the change of log odds of survival for a
variable and it differs from variable to variable such as the odds of
survival depending on how much a person paid for a ticket and their age

the odds ratio means the change in the odds between 2 different groups
for example within the age variable there should be a difference between
the odds of survival if you're over 65 and if you're under 18 and there
should be a difference within the sex variable meaning a difference of
survival odds between males and females

::: callout-hint
## 

Recall the definition of logistic regression from the lecture notes, and
also recall how we interpreted the slope in the linear regression model
(particularly when the covariate was categorical).
:::

<br><br><br><br> <br><br><br><br> ---

## Question 3

::: callout-tip
## 70 points

Variable selection and logistic regression in `torch`
:::

------------------------------------------------------------------------

###### 3.1 (15 points)

Complete the following function `overview` which takes in two
categorical vectors (`predicted` and `expected`) and outputs:

-   The prediction accuracy

-   The prediction error

-   The false positive rate, and

-   The false negative rate

    ```{r}
    overview <- function(predicted, expected){

        accuracy <- sum(predicted == expected) / length(expected)
        error <- 1 - accuracy
        total_false_positives <- sum(predicted == 1 & expected == 1)
        total_true_positives <- sum(predicted == 0 & expected == 0)
        total_false_negatives <- sum(predicted == 1 & expected == 0)
        total_true_negatives <- sum(predicted == 0 & expected == 1)
        false_positive_rate <- total_false_positives / (total_false_positives + total_true_negatives)
        false_negative_rate <- total_false_negatives / (total_false_negatives + total_true_positives)
        
        return(
            data.frame(
                accuracy = accuracy, 
                error=error, 
                false_positive_rate = false_positive_rate, 
                false_negative_rate = false_negative_rate
            )
        )
    }
    ```

You can check if your function is doing what it's supposed to do by
evaluating

```{r}
overview(df$y, df$y)
```

## and making sure that the accuracy is $100\%$ while the errors are $0\%$.

###### 3.2 (5 points)

Display an overview of the key performance metrics of `full_model`

```{r}

predicted <- ifelse(predict(full_model, type = "response") > 0.5, 1, 0)
expected <- df$y  

performance_metrics <- overview(predicted, expected)

print(performance_metrics)

```

------------------------------------------------------------------------

###### 3.3 (5 points)

Using backward-stepwise logistic regression, find a parsimonious
altenative to `full_model`, and print its `overview`

```{r}
step_model <- step(full_model, direction = "backward")
summary(step_model)
```

```{r}
step_predictions <- ifelse(predict(step_model, type = "response") > 0.5, 1, 0)
summary(step_predictions)
```

------------------------------------------------------------------------

###### 3.4 (15 points)

Using the `caret` package, setup a $5$-fold cross-validation training
method using the `caret::trainConrol()` function

```{r}
library(caret)

controls <- trainControl(method = "cv", number = 5)
```

Now, using `control`, perform $5$-fold cross validation using
`caret::train()` to select the optimal $\lambda$ parameter for LASSO
with logistic regression.

Take the search grid for $\lambda$ to be in
$\{ 2^{-20}, 2^{-19.5}, 2^{-19}, \dots, 2^{-0.5}, 2^{0} \}$.

```{r}
# Insert your code in the ... region
lasso_fit <- train(
  x = df[, c("pclass", "age", "siblings.spouses.aboard", "parents.children.aboard", "fare")], 
  y = df$y, 
  method = "glmnet",
  trControl = controls, 
  tuneGrid = expand.grid(
    alpha = 1,
    lambda = 2^seq(-20, 0, by = 0.5)
    ),
  family = "binomial"
)

lasso_fit
```

Using the information stored in `lasso_fit$results`, plot the results
for cross-validation accuracy vs. $log_2(\lambda)$. Choose the optimal
$\lambda^*$, and report your results for this value of $\lambda^*$.

```{r}
results_df <- lasso_fit$results

plot(results_df$lambda, results_df$Accuracy, xlab = "log2(lambda)", ylab = "accuracy", main = "accuracy vs log2_lamda")

optimal <- results_df$lambda[which.max(results_df$Accuracy)]
optimal
```

------------------------------------------------------------------------

###### 3.5 (25 points)

First, use the `model.matrix()` function to convert the covariates of
`df` to a matrix format

```{r}
covariate_matrix <- model.matrix(full_model)[, -1]
```

Now, initialize the covariates $X$ and the response $y$ as `torch`
tensors

```{r}
X <- torch_tensor(covariate_matrix, dtype = torch_float())
y <- torch_tensor(df$y, dtype = torch_float())
```

Using the `torch` library, initialize an `nn_module` which performs
logistic regression for this dataset. (Remember that we have 6 different
covariates)

```{r}
logistic <- nn_module(
  initialize = function() {
    self$f <- torch_randn(6, 1, dtype = torch_float(), requires_grad = TRUE)
    self$g <- torch_zeros(1, dtype = torch_float(), requires_grad = TRUE)
  },
  forward = function(x) {
    linear <- torch_addmm(self$g, x, self$f)
    output <- torch_sigmoid(linear)
    return(output)
  }
)

f <- logistic()
```

You can verify that your code is right by checking that the output to
the following code is a vector of probabilities:

```{r}
f(X)
```

Now, define the loss function `Loss()` which takes in two tensors `X`
and `y` and a function `Fun`, and outputs the **Binary cross Entropy
loss** between `Fun(X)` and `y`.

```{r}
Loss <- function(X, y, Fun) {
  linear <- torch_addmm(Fun$g, X, Fun$f)
  output <- torch_sigmoid(linear)
  loss <- nn_bce_loss()(output, y)
  return(loss)
}

```

Initialize an optimizer using `optim_adam()` and perform $n=1000$ steps
of gradient descent in order to fit logistic regression using `torch`.

```{r}
f <- logistic()
optimizer <- optim_adam(list(f$f, f$g), lr = 0.01) # Insert your code here

n_steps <- 1000
for (i in 1:n_steps) {
  optimizer$zero_grad()
  loss <- Loss(X, y, f)
  loss$backward()
  optimizer$step()
  
  if (i %% 100 == 0) {
    cat('Step:', i, 'Loss:', as.array(loss), '\n')
  }
}
```

Using the final, optimized parameters of `f`, compute the compute the
predicted results on `X`

```{r}
predicted_probabilities <- f(X) %>% as_array()
torch_predictions <- ifelse(predicted_probabilities > 0.5, 1, 0)

overview(torch_predictions, df$y)
```

------------------------------------------------------------------------

###### 3.6 (5 points)

Create a summary table of the `overview()` summary statistics for each
of the $4$ models we have looked at in this assignment, and comment on
their relative strengths and drawbacks.

```{r}
overview(predicted,expected)#high accuracy and low false negative rates but acceptable error and high false positive rate


overview(torch_predictions, expected)#low accuracy and high error, false postitve, and false negative rates

overview(covariate_matrix,expected)#high accuracy good error rate and slightly high false positive and negative rates

overview(step_predictions ,expected)#high accuracy and low false negative rates but acceptable error and high false positive rate

```

::: {.hidden unless-format="pdf"}
\pagebreak
:::

<br><br><br><br> <br><br><br><br> ---

::: {.callout-note collapse="true"}
## Session Information

Print your `R` session information using the following command

```{R}
sessionInfo()
```
:::
